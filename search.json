[{"path":"https://litgde.github.io/Spectran/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Spectran authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://litgde.github.io/Spectran/articles/Validation.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Validation","text":"document compares results ten spectra across Spectral Analysis Shiny application, online app luox Manuel Spitschan, free CIE S 026 alpha-opic Toolbox. main goal document validate Spectral Analysis application methods CIE provided already validated. look results illuminance, α-opic irradiance, α-opic equivalent daylight (D65) illuminance. also compare irradiance (toolbox) Correlated Color Temperature (CCT) Color-Rendering Index (CRI) (luox app), available one two validated sources. three sources offer parameters, either part shiny application validated source derivatives -mentioned parameters. spectral data files negative input values (coming straight spectrometer export measurement). Shiny app replaces values zero, whereas CIE toolbox gives error values. , values manually set zero toolbox user input mask. luox app gives error negative values, exactly known app deals values (see @sec-conclusion ). results CIE Toolbox luox taken 21 October 2022 respective current version date.","code":""},{"path":"https://litgde.github.io/Spectran/articles/Validation.html","id":"table-preparation","dir":"Articles","previous_headings":"","what":"Table Preparation","title":"Validation","text":"following code chunks prepare tables shown . first chunk loads necessary libraries: following chunk loads data: following chunk takes relevant data comparison sources puts one table per comparison spectrum: following chunk transforms comparison tables spectra one comprehensive table. next chunk prepares table output flexible way:","code":"#Setup code, data import, initial data selection to get to one comparison file #read all libraries library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(purrr) library(ggplot2) library(tibble) library(readr) library(stringr) library(tidyr) library(readxl) library(magick) #> Linking to ImageMagick 6.9.11.60 #> Enabled features: fontconfig, freetype, fftw, heic, lcms, pango, webp, x11 #> Disabled features: cairo, ghostscript, raw, rsvg #> Using 4 threads library(gt) library(here) #> here() starts at /home/runner/work/Spectran/Spectran library(cowplot)  #Plottheme theme_set(theme_cowplot(font_size = 10, font_family = \"sans\")) #Data Import -------------------  ##read all filenames and paths of spectra spectra <-    tibble(     file_names = list.files(\"./Original_Spectra\"),     file_path = paste0(\"./Original_Spectra/\", list.files(\"./Original_Spectra\"))     )  ##read the csv-files to that spectra spectra <-    spectra %>%    rowwise() %>%    mutate(Spectrum = list(read_csv(file_path))) #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 401 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> dbl (2): Wellenlaenge (nm), Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  ##create a name column  spectra <-    spectra %>%    mutate(spectrum_name = str_replace(file_names, \".csv\", \"\"))  ##read the results from the luox app spectra <-    spectra %>%    rowwise() %>%    mutate(     luox = list(       read_csv(         paste0(\"./Results_Luox_2022-10-21/\", spectrum_name,                 \"/download-calc.csv\")         )       )     ) #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> Rows: 35 Columns: 2 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): Condition #> dbl (1): Bestrahlungsstaerke (W/m^2) #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  ##read the results from the shiny app ###filepath excel_file_path <- function(spectrum_name) {   paste0(     \"./Results_ShinyApp/\",     {{ spectrum_name }},      \"/\",     {{ spectrum_name }},      \"_9_2022-10-20.xlsx\"     ) } ###list for each worksheet in the excel-file spectra <-    spectra %>%    rowwise() %>%    mutate(     shiny = list(       list(         Radiometrie = read_xlsx(           excel_file_path(spectrum_name),            sheet = \"Radiometrie\"           ),         Photometrie = read_xlsx(           excel_file_path(spectrum_name),            sheet = \"Photometrie\"           ),         Alpha = read_xlsx(           excel_file_path(spectrum_name),            sheet = \"Alpha-opisch\"           )         )       )     )   ##read the results from the CIE toolbox spectra <-    spectra %>%    rowwise() %>%    mutate(     toolbox = list(       read_xlsx(         paste0(           \"./Results_CIE_Toolbox/\",            spectrum_name,            \"/CIE S 026 alpha-opic Toolbox.xlsx\"           ),          sheet = \"Outputs\"         )       )     ) #> New names: #> New names: #> New names: #> New names: #> New names: #> New names: #> New names: #> New names: #> New names: #> New names: #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> • `` -> `...5` #Initial Data wrangling ------------------- ##take the relevant datapoints from the luox results ### the relevant data in the luox results are in column 2, rows 1, 6 to 15, 22,  ### and 24 locations_luox <- c(1, 6:15, 22, 24) spectra <-    spectra %>%    rowwise() %>%    mutate(     excerpt = list(       tibble(         Name = luox %>% pull(1) %>% .[locations_luox],         Results_luox = luox %>% pull(2) %>% .[locations_luox]         )       )     )  ###Add a row for irradiance, which is missing in the luox output spectra <-    spectra %>%    mutate(     excerpt = list(       rbind(         excerpt[1:11,],          c(\"Irradiance (mW ⋅ m⁻²)\", NA),          excerpt[12:13,]         )       ),     excerpt = list(       excerpt %>% mutate(Results_luox = as.numeric(Results_luox))     )     )  ##extract the relevant datapoints from the shiny app ### the relevant data in the shiny app results are in the list  ### - \"Photometrie\", column 3, row 1,  ### - \"Alpha\", column 3 to 7, row 1 to 2 (the order has to be adjusted in order  ###to match the luox data frame) ### - \"Radiometrie, column 3, row 1,  ### - \"Photometrie\", column 3, row 4 to 5 shiny_extract <- function(data, sheet, column = Wert, rows) {   data %>% .[[sheet]] %>% pull({{ column }}) %>% .[rows] } spectra <-    spectra %>%    rowwise() %>%    mutate(     excerpt = list(       cbind(         excerpt[1],         tibble(         Results_shiny = as.numeric(           c(             shiny_extract(               data = shiny, sheet = \"Photometrie\", rows = 1),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Cyanopsin\", rows = 2),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Chloropsin\", rows = 2),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Erythropsin\", rows = 2),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Rhodopsin\", rows = 2),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Melanopsin\", rows = 2),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Cyanopsin\", rows = 1),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Chloropsin\", rows = 1),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Erythropsin\", rows = 1),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Rhodopsin\", rows = 1),             shiny_extract(               data = shiny, sheet = \"Alpha\", column = \"Melanopsin\", rows = 1),             shiny_extract(               data = shiny, sheet = \"Radiometrie\", rows = 1),             shiny_extract(               data = shiny, sheet = \"Photometrie\", rows = c(4, 5))             )           )         ),         excerpt[2]         )       )   )  ##extract the relevant datapoints from the CIE Toolbox ### the relevant data in the toolbox are in  ### column 3, row 14 ### column 1 to 5, row 20-> needs to be multiplied by a factor of 1000 to be in  ### mW, to which the other sources are scaled. ### column 1 to 5, row 32 ### column 1, row 14 -> needs to be multiplied by a factor of 1000 to be in mW,  ### to which the other sources are scaled. spectra <-    spectra %>%    mutate(     excerpt = list(       cbind(         excerpt,         tibble(           Results_toolbox = as.numeric(             c(               toolbox %>% pull(3) %>% .[14],               toolbox %>% {as.vector(.[20,])} %>% as.numeric %>%                  magrittr::multiply_by(1000),               toolbox %>% {as.vector(.[32,])},               toolbox %>% pull(1) %>% .[14] %>% as.numeric %>%                  magrittr::multiply_by(1000),               NA, NA               )             )           )         )       )     ) #Putting the table together ------------------- ##create a function that calculates the relative difference between the shiny  ##app-results, and another source Deviation <- function(Results, Results2){   if(!is.na({{ Results }}) & !is.na({{ Results2 }})){   res <- 1- {{ Results }} / {{ Results2 }}   res2 <- vec_fmt_scientific(res)   if(res < 0) {     paste0('<div style=\"color:red\">', res2, '<\/div>')   }   else if(res == 0 ) {     paste0('<div style=\"color:green\">', res2, '<\/div>')   }   else {     paste0('<div style=\"color:blue\">', res2, '<\/div>')   }    }   else NA }  ##new dataframe, unnested data, columns for relative difference Results <-    spectra %>%    select(spectrum_name, excerpt) %>%    unnest(excerpt) %>%    rowwise() %>%    mutate(Dev_luox = Deviation(Results_luox, Results_shiny),          Dev_toolbox = Deviation(Results_toolbox, Results_shiny)          )  ##pivoting the dataframe wider, so that each spectrum has only one row Results <-    Results %>%    pivot_wider(     id_cols = spectrum_name,      names_from = Name,      values_from = c(Results_shiny:Dev_toolbox),     names_sep = \".\"     )  ##adding a placeholder for the spectrum picture, with the filepath ###filepath pdf_file_path <- function(spectrum_name) {   paste0(\"<img src='Results_ShinyApp/\",     {{ spectrum_name }},      \"/\",     {{ spectrum_name }},      \"_1_Radiometrie_2022-10-20.png' style=\\'height:80px;\\'>\"     ) } ###splicing the dataframes together Results <- cbind(Results[,1], as_tibble_col(   pdf_file_path(spectra$spectrum_name), column_name = \"Picture\"), Results[,-1]) #setting the table up -------------------  ##names for the merging merging_names <- spectra$excerpt[[1]]$Name merging_names2 <- spectra$excerpt[[1]]$Name %>% str_replace(\"\\\\(\", \"<br>\\\\(\")  ##column names for renaming col_names <- paste0(\"Results_shiny.\", merging_names) ##creating a list with one entry per variable, named after the column name (to  ##be renamed later) renaming <- rbind(merging_names2) names(renaming) <- col_names renaming <- renaming %>% as.list() renaming <- map(renaming, md)  #creating a list with cells not to format by decimals number_fmt_col <-    Results %>% select(!starts_with(\"Dev\") & !Picture & !spectrum_name) %>%    names()  ##function that does the merging merging <- function(data, Name, condition = \"difference\") {   if(condition == \"difference\"){   data %>% cols_merge(columns = ends_with(Name, ignore.case = FALSE),              pattern = \"<div style='color:lightgrey'>shiny:<\/div>{1}<div              style='color:lightgrey'>luox:<\/div>{4}<div style='color:lightgrey'>              toolbox:<\/div>{5}\")   }   else {       data %>% cols_merge(columns = ends_with(Name, ignore.case = FALSE),              pattern = \"<div style='color:lightgrey'>shiny:<\/div>{1}<div              style='color:lightgrey'>luox:<\/div>{2}<div style='color:lightgrey'>              toolbox:<\/div>{3}\")   } }  #creating a function for the gt table comparison_table <- function(tt_text, fn_text, condition) { gtobj <- Results %>%    gt(rowname_col = c(\"spectrum_name\")) %>%    tab_header(title = md(paste0(\"**Validation Results: \",tt_text , \"**\"))) %>%    tab_footnote(footnote = fn_text)  for(i in seq_along(merging_names)) {   gtobj <- gtobj %>% merging(merging_names[i], condition = condition) }  gtobj <- gtobj %>%      fmt_markdown(columns = everything()) %>%   fmt_number(     columns = all_of(number_fmt_col),     decimals = 3,     sep_mark = \"\",     pattern = \"{x}<br>\"     ) %>%   cols_align(align = \"center\") %>%    cols_label(.list = renaming) %>%   sub_missing(missing_text = md(\"---<br>\")) %>%    cols_width(     Picture ~px(150),     everything() ~ px(80)   ) %>%    opt_align_table_header(align = \"left\") %>%    tab_options(table.font.size = \"9px\")  gtobj  }"},{"path":"https://litgde.github.io/Spectran/articles/Validation.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Validation","text":"section shows validation results two tables. first table shows results Shiny App per spectrum parameter alongside relative difference respective results luox app CIE Toolbox. second table shows results per spectrum parameter. Note Shiny App provide CRI [Ra] artificial EE_Spektrum LED_4000K_2, exceed CIE limits calculation. Relative Differences Results sources EE_Spektrum Fluoreszenz_NW Fluoreszenz_WW Halogen LED_2200K LED_4000K_1 LED_4000K_2 LED_6900K Nordhimmel Norm_TL_6500K EE_Spektrum Fluoreszenz_NW Fluoreszenz_WW Halogen LED_2200K LED_4000K_1 LED_4000K_2 LED_6900K Nordhimmel Norm_TL_6500K quick overview previous table show Shiny app produces results either identical, least similar luox app CIE Toolbox. next two sections provide concise overview sources compare.","code":"#creating the gtable -------------------  #text for the subtitle fn_text <-    md(paste0(     \"The first number in every cell shows the Result from the *Shiny* app, \",     \"<br>the second number the **relative** difference of the respective \",     \"result from the *luox* app, <br>whereas the third number shows the same \",     \"for the result from the *CIE S026 Toolbox*. <br><a style='color:green'>\",     \"green<\/a> values indicate a zero difference, <a style='color:red'>red<\/a>\",     \" a negative difference, and <a style='color:blue'>blue<\/a> a positive \",     \"difference. <br>All *Shiny* values are rounded to three decimals. <br>\",      \"Missing values or pairwise comparisons are indicated by a ---.\"))  tt_text <- \"Relative Differences\" comparison_table(tt_text, fn_text, condition = \"difference\") #creating the gtable -------------------  #text for the subtitle fn_text <- md(\"The first number in every cell shows the Result from the *Shiny*                app, <br>the second number the result from the *luox* app, <br>               whereas the third number shows the result from the *CIE S026                Toolbox*. <br>All values are rounded to three decimals. <br>               Missing values are indicated by a ---.\")  tt_text <- \"All Results\" comparison_table(tt_text, fn_text, condition = \"\") #extract the relative difference differentiated by spectrum and variable Discussion <-    spectra %>%    select(spectrum_name, excerpt) %>%    unnest(excerpt) %>%    rowwise() %>%    mutate(Dev_luox = 1 - Results_luox/Results_shiny,          Dev_toolbox = 1 - Results_toolbox/Results_shiny          ) %>%    ungroup()  #throwing the units out for visualization Discussion <-    Discussion %>% mutate(Name = str_replace(Name, \"\\\\(mW ⋅ m⁻²\\\\)\", \"\"),                         Name = str_replace(Name, \"\\\\(lx\\\\)\", \"\"))"},{"path":"https://litgde.github.io/Spectran/articles/Validation.html","id":"pairwise-comparison-to-the-luox-app","dir":"Articles","previous_headings":"Results","what":"Pairwise comparison to the luox app","title":"Validation","text":"128 comparisons, 20 identical, 25 smaller, 83 larger, using luox results basis. median relative difference 2.93 × 10−6 (disregarding sign), .e., 0.00029%. highest relative difference (disregarding sign) 2.16 × 10−3 0.22%, occured Colour Rendering Index [Ra]. following figure provides histogram relative differences (excluding zero difference), colored variable. Overview Split Variable Split Spectrum","code":"#creating a subframe for the luox-data, filtered by removing all non-comparisons Data <- Discussion %>% dplyr::filter(!is.na(Dev_luox)) #number of comparisons made n <- Data %>% count() %>% pull(1) #number of comparisons split by difference n2 <- Data %>% group_by(Dev_luox == 0, Dev_luox > 0, Dev_luox < 0) %>%    count() %>% pull(n) n2[3] <- ifelse(is.na(n2[3]), \"none\",  n2[3]) #median difference when disregarding sign n3 <- Data %>% filter(Dev_luox != 0) %>%    dplyr::summarise(median = median(abs(Dev_luox))) %>% pull(1) #maximum difference n4 <- Data %>% pull(Dev_luox) %>% abs() %>% max() #where did this difference occur n4_2 <- Data$Name[abs(Data$Dev_luox) == n4] #make a histogram of the values and calculate relevant values  breaks <- c(10^-15, 10^-10, 10^-5, 1)  Base_Plot <-    Data %>% filter(Dev_luox !=0) %>%    ggplot(aes(x=abs(Dev_luox))) +   geom_histogram(aes(fill = Name))+   xlab(\"relative difference (irregarding sign)\")+   expand_limits(x= 1) Base_Plot +   scale_x_log10(breaks = breaks, labels = c(vec_fmt_number(breaks*100,                                                             n_sigfig = 1,                                                             pattern = \"{x}%\"))) +   ylab(\"no. of spectra\") Base_Plot +   scale_x_log10(breaks = breaks)+   ylab(\"no. of spectra\")+   facet_wrap(\"Name\") Base_Plot +   scale_x_log10(breaks = breaks)+   ylab(\"no. of variables\")+   facet_wrap(\"spectrum_name\")"},{"path":"https://litgde.github.io/Spectran/articles/Validation.html","id":"pairwise-comparison-to-the-cie-toolbox","dir":"Articles","previous_headings":"Results","what":"Pairwise comparison to the CIE Toolbox","title":"Validation","text":"120 comparisons, none identical, 25 smaller, 95 larger, using CIE Toolbox results basis. median relative difference 1.13 × 10−6 (disregarding sign), .e., 0.00011%. highest relative difference (disregarding sign) 1.81 × 10−5 0.0018%, occured M-cone-opic EDI. following figure provides histogram relative differences (excluding zero difference), colored variable. Overview Split Variable Split Spectrum","code":"#creating a subframe for the luox-data, filtered by removing all non-comparisons Data <- Discussion %>% dplyr::filter(!is.na(Dev_toolbox)) #number of comparisons made n <- Data %>% count() %>% pull(1) #number of comparisons split by difference n2 <- Data %>% group_by(Dev_toolbox == 0, Dev_toolbox > 0, Dev_toolbox < 0) %>%    count() %>% pull(n) n2[3] <- ifelse(is.na(n2[3]), \"none\",  n2[3]) #median difference when disregarding sign n3 <- Data %>% filter(Dev_toolbox != 0) %>%    dplyr::summarise(median = median(abs(Dev_toolbox))) %>% pull(1) #maximum difference n4 <- Data %>% pull(Dev_toolbox) %>% abs() %>% max() #where did this difference occur n4_2 <- Data$Name[abs(Data$Dev_toolbox) == n4] #make a histogram of the values and calculate relevant values  Base_Plot <-    Data %>% filter(Dev_toolbox !=0) %>%    ggplot(aes(x=abs(Dev_toolbox))) +   geom_histogram(aes(fill = Name))+   xlab(\"relative difference (irregarding sign)\")+   expand_limits(x= 1) Base_Plot +   scale_x_log10(breaks = breaks, labels = c(vec_fmt_number(breaks*100,                                                             n_sigfig = 1,                                                             pattern = \"{x}%\")))+   ylab(\"no. of spectra\") Base_Plot +   scale_x_log10(breaks = breaks)+   ylab(\"no. of spectra\")+     facet_wrap(\"Name\") Base_Plot +   scale_x_log10(breaks = breaks)+   ylab(\"no. of variables\")+   facet_wrap(\"spectrum_name\")"},{"path":"https://litgde.github.io/Spectran/articles/Validation.html","id":"sec-conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Validation","text":"Overall, agreement different sources high differences occur several decimals back. cases, rounding errors seem plausible explanation. older version Shiny app, negative input values irradiance taken face value, .e., actually reduced variable values require summation. state, many comparisons showed zero difference luox app, seems indicate luox app also takes negative values face value. However, median relative difference older state double compared current state luox app CIE Toolbox sources. Since overall error reduced current state Shiny app sensible restrict input values zero positive numbers, method used public release. summary, Shiny app offers sufficiently accurate calculation ⍺-opic values, especially given focus education. note, however, age corrected values validated two sources, since don´t provide similar functionality.","code":""},{"path":"https://litgde.github.io/Spectran/articles/Values.html","id":"preface","dir":"Articles","previous_headings":"","what":"Preface","title":"Underlying values","text":"document describes summarizes various values used Spectran. tables comprehensive, makes little sense go sequentially. Instead, can use table contents jump section interest.","code":""},{"path":"https://litgde.github.io/Spectran/articles/Values.html","id":"action-spectra","dir":"Articles","previous_headings":"","what":"Action Spectra","title":"Underlying values","text":"units following tables nm (nanometers) wavelength, 1 action spectrum. action spectrum relative measure, therefore unit. data alpha-opic action spectra taken CIE S026 Toolbox. 2° photopic luminous efficiency function V(λ) (380-780 nm) taken ISO/CIE 23539:2023.","code":"Specs$AS_wide %>% rename(Wavelength = Wellenlaenge) %>% table_fun()"},{"path":"https://litgde.github.io/Spectran/articles/Values.html","id":"efficacy-of-luminous-radiation","dir":"Articles","previous_headings":"","what":"Efficacy of luminous radiation","title":"Underlying values","text":"","code":"Efficacy <- Specs$Efficacy %>%    as_tibble() %>%    pivot_longer(cols = everything(), values_to = \"inverse Efficacy\") %>%    mutate(Efficacy = 1/`inverse Efficacy`*1000) %>% table_fun() %>%    tab_footnote(footnote = \"lm/W\",locations = cells_column_labels(     columns = \"inverse Efficacy\")) %>%    tab_footnote(footnote = \"mW/lm\",locations = cells_column_labels(     columns = \"Efficacy\")) %>%    tab_options(footnotes.multiline = FALSE) %>%    fmt_number(drop_trailing_zeros = TRUE, decimals = 7, sep_mark = \" \") Efficacy"},{"path":"https://litgde.github.io/Spectran/articles/Values.html","id":"colors","dir":"Articles","previous_headings":"","what":"Colors","title":"Underlying values","text":"plotting table creation, Peak wavelengths, colors, abbreviations used. can found following table. following table shows colors used plot color rendering. Finally, last table shows colors used create spectrum plots.","code":"Specs$Plot %>% table_fun() %>%   tab_footnote(footnote = \"Wavelength (nm)\",locations = cells_column_labels(     columns = \"Peak\")) %>%    data_color(columns = Col, fn = \\(x) Specs$Plot$Col) ColorP$Color_Rendering %>% tibble(Reference = names(.), Color = .) %>%    table_fun() %>% data_color(columns = Color, fn = \\(x) ColorP$Color_Rendering) ColorP$Rainbow %>%    tibble(`Wavelength (nm)` = names(.),           Lang = ColorP$Lang,          Lang_bright = ColorP$Lang_bright,          Dan_Bruton = ColorP$Dan_Bruton,          Rainbow = .) %>%    table_fun() %>%    data_color(columns = Rainbow, fn = \\(x) ColorP$Rainbow) %>%    data_color(columns = Lang, fn = \\(x) ColorP$Lang) %>%    data_color(columns = Lang_bright, fn = \\(x) ColorP$Lang_bright) %>%    data_color(columns = Dan_Bruton, fn = \\(x) ColorP$Dan_Bruton)"},{"path":"https://litgde.github.io/Spectran/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Johannes Zauner. Author, maintainer, copyright holder. LiTG. Funder, copyright holder.            www.litg.de","code":""},{"path":"https://litgde.github.io/Spectran/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zauner, J. (2023); Deutsche Lichttechnische Gesellschaft e.V.; Spectran: Visual Non-Visual Spectral Analysis Emphasis Education Presentation-Ready Diagrams. Available https://litgde.github.io/Spectran/","code":"@Misc{,   title = {Spectran: Visual and Non-Visual Spectral Analysis with an Emphasis on Education and Presentation-Ready Diagrams},   author = {Johannes Zauner},   year = {2023},   note = {a publication from LiTG e.V. (Deutsche Lichttechnische Gesellschaft e.V.)},   url = {https://litgde.github.io/Spectran/}, }"},{"path":"https://litgde.github.io/Spectran/index.html","id":"spectran-","dir":"","previous_headings":"","what":"Visual and Non-Visual Spectral Analysis of Light","title":"Visual and Non-Visual Spectral Analysis of Light","text":"Spectran, developed German Technical Lighting Society (LiTG), Shiny App designed analyze light spectra visual non-visual (also known melanopic) needs. app supports import spectral data CSV text formats also offers extensive library example spectra. Users can even create spectral distributions within app. primary aim Spectran offer easy access visual representation calculations underlie commonly used parameters. , serves ideal tool educational purposes generating presentation-ready graphs lighting research application.","code":""},{"path":"https://litgde.github.io/Spectran/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visual and Non-Visual Spectral Analysis of Light","text":"can install stable release version Spectran CRAN : can install latest development version Spectran GitHub :","code":"install.packages(\"Spectran\") # install.packages(\"devtools\") devtools::install_github(\"LiTGde/Spectran\")"},{"path":"https://litgde.github.io/Spectran/index.html","id":"how-to-use-spectran","dir":"","previous_headings":"","what":"How to use Spectran","title":"Visual and Non-Visual Spectral Analysis of Light","text":"commands show start Spectran: library(Spectran) Spectran() simply go example hosted shinyapps.io. can also use German version: Spectran(lang_setting = \"Deutsch\") go ´s example shinyapps.io.","code":""},{"path":"https://litgde.github.io/Spectran/index.html","id":"example-screenshots","dir":"","previous_headings":"","what":"Example Screenshots","title":"Visual and Non-Visual Spectral Analysis of Light","text":"User Interface (UI) Melanopic Analysis UI Analysis Age-dependent changes Export Table Alpha-opic Quantities Export File Photometric Quantities UI File Import UI Example Spectra Import","code":""},{"path":"https://litgde.github.io/Spectran/reference/ColorP.html","id":null,"dir":"Reference","previous_headings":"","what":"Hex Color pallets for Spectran — ColorP","title":"Hex Color pallets for Spectran — ColorP","text":"Contains named vectors Hex color codes Spectran's color pallets.","code":""},{"path":"https://litgde.github.io/Spectran/reference/ColorP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hex Color pallets for Spectran — ColorP","text":"","code":"ColorP"},{"path":"https://litgde.github.io/Spectran/reference/ColorP.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hex Color pallets for Spectran — ColorP","text":"ColorP list containing 5 elements, named vector colors Lang 401 colors along spectrum make nice, yet nonaccurate representation visible spectrum. Created picture provided Dieter Lang. Lang_bright Lang slightly brightened version picture. Strikes nice balance \"accuracy\" \"nice colors\". default starting Spectran() Dan_Bruton 401 colors along spectrum made cooltools::wavelength2col() function based Fortran Code Dan_Bruton. Probably accurate, black spectral ends, represent colors also human sensitivity . Rainbow 401 colors along spectrum make vibrant pleasing, yet nonaccurate representation visible spectrum. Created grDevices::rainbow() function. Color_Rendering 14 colors represent reference colors used determine color rendering index.","code":""},{"path":"https://litgde.github.io/Spectran/reference/ColorP.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hex Color pallets for Spectran — ColorP","text":"grDevices::rainbow() cooltools::wavelength2col() https://github.com/LiTGde/Spectran/issues/14","code":""},{"path":"https://litgde.github.io/Spectran/reference/Specs.html","id":null,"dir":"Reference","previous_headings":"","what":"Specifications for visual and nonvisual data wrangling and plotting — Specs","title":"Specifications for visual and nonvisual data wrangling and plotting — Specs","text":"Contains vectors tables main basis calculations Spectran also contain basic naming coloring conventions.","code":""},{"path":"https://litgde.github.io/Spectran/reference/Specs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specifications for visual and nonvisual data wrangling and plotting — Specs","text":"","code":"Specs"},{"path":"https://litgde.github.io/Spectran/reference/Specs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Specifications for visual and nonvisual data wrangling and plotting — Specs","text":"Specs list 7 elements AS_wide table action spectra 5 human receptor types V(lambda) 1924. table wide format. unit wavelength (Wellenlaenge) nm, unit action spectrum 1 (dimensionless). AS_long table action spectra 5 human receptor types V(lambda) 1924. table long format. unit wavelength (Wellenlaenge) nm, unit action spectrum 1 (dimensionless). Efficacy named vector inverse values efficacy luminous radiation 5 human receptor types V(lambda) 1924. unit lm/W. Alpha list. names contains names 5 human receptor types. adjectives contains names adjective form every languages included Spectran. descriptions contains descriptions used tables plotting. abb contains abbreviations () used equivalent daylight illuminance receptor type. Vlambda character scalar containing properly escaped version V(lambda), used e.g. Plots Alpha.ico character scalar containing properly escaped version sign alpha, used e.g. Plots Plot table Peak Wavelength (nm) values, Names, Abbreviations, colors 5 human receptor types V(lambda) 1924. table mainly used plotting.","code":""},{"path":"https://litgde.github.io/Spectran/reference/Specs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Specifications for visual and nonvisual data wrangling and plotting — Specs","text":"CIE S026 DIN/TS 5031-100","code":""},{"path":"https://litgde.github.io/Spectran/reference/Spectran-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectran: Visual and Non-Visual Spectral Analysis of Light — Spectran-package","title":"Spectran: Visual and Non-Visual Spectral Analysis of Light — Spectran-package","text":"Analyse light spectra visual non-visual (often called melanopic) needs, wrapped Shiny App. 'Spectran' allows import spectra various CSV forms also provides wide range example spectra even creation spectral power distributions. goal app provide easy access visual overview spectral calculations underlying common parameters used field. thus ideal educational purposes creation presentation ready graphs lighting research application. 'Spectran' uses equations action spectra described CIE S026 (2018) doi:10.25039/S026.2018 , DIN/TS 5031-100 (2021) doi:10.31030/3287213 , ISO/CIE 23539 (2023) doi:10.25039/IS0.CIE.23539.2023 .","code":""},{"path":[]},{"path":"https://litgde.github.io/Spectran/reference/Spectran-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Spectran: Visual and Non-Visual Spectral Analysis of Light — Spectran-package","text":"Maintainer: Johannes Zauner spectran@litg.de (ORCID) [copyright holder] contributors: LiTG (www.litg.de) [funder, copyright holder]","code":""},{"path":"https://litgde.github.io/Spectran/reference/Spectran.html","id":null,"dir":"Reference","previous_headings":"","what":"Unlock the Spectrum: Easy, Educational, and Engaging Analysis of Light Spectra — Spectran","title":"Unlock the Spectrum: Easy, Educational, and Engaging Analysis of Light Spectra — Spectran","text":"Unlock Spectrum: Easy, Educational, Engaging Analysis Light Spectra","code":""},{"path":"https://litgde.github.io/Spectran/reference/Spectran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unlock the Spectrum: Easy, Educational, and Engaging Analysis of Light Spectra — Spectran","text":"","code":"Spectran(   lang_setting = \"English\",   lang_link = FALSE,   color_palette = \"Lang\",   ... )"},{"path":"https://litgde.github.io/Spectran/reference/Spectran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unlock the Spectrum: Easy, Educational, and Engaging Analysis of Light Spectra — Spectran","text":"lang_setting language application. Currently Deutsch German English (default) implemented. Expects character. lang_link relevant App deployed Shinyapps.io. Handles whether link German/English Version App present header. Expects logical (default FALSE) color_palette color palette application. Currently **Lang** (default), **Lang_bright**, **Dan_Bruton**, **Rainbow** implemented. Expects *character*. terms color accuracy, decending order likely **Dan_Bruton**, **Lang**, **Lang_bright**, **Rainbow**. However, wrong sense, monochromatic light can well recreated RGB colors. Look documentation ColorP information palettes. ... settings get passed shinyApp","code":""},{"path":"https://litgde.github.io/Spectran/reference/Spectran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unlock the Spectrum: Easy, Educational, and Engaging Analysis of Light Spectra — Spectran","text":"Open viewer shiny app","code":""},{"path":"https://litgde.github.io/Spectran/reference/Spectran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unlock the Spectrum: Easy, Educational, and Engaging Analysis of Light Spectra — Spectran","text":"","code":"if(interactive()) { Spectran()}  #try another language if(interactive()) { Spectran(lang_setting = \"Deutsch\")}  #or try another color palette if(interactive()) { Spectran(color_palette = \"Dan_Bruton\")}"},{"path":"https://litgde.github.io/Spectran/reference/examplespectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Example spectra used by Spectran — examplespectra","title":"Example spectra used by Spectran — examplespectra","text":"Contains Measurement CIE Standard Illuminant Spectra. Additional data spectra can found examplespectra_descriptor dataset.","code":""},{"path":"https://litgde.github.io/Spectran/reference/examplespectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example spectra used by Spectran — examplespectra","text":"","code":"examplespectra"},{"path":"https://litgde.github.io/Spectran/reference/examplespectra.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example spectra used by Spectran — examplespectra","text":"examplespectra list two elements, containing table spectral data Measurement Spectral data measured spectroradiometer. unit wavelength (Wellenlaenge) nm, unit spectral data W/m^2. CIE Spectral data CIE describing Standard Illuminants. unit wavelength (Wellenlaenge) nm, unit spectral data W/m^2.","code":""},{"path":"https://litgde.github.io/Spectran/reference/examplespectra.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example spectra used by Spectran — examplespectra","text":"https://cie.co./data-tables","code":""},{"path":"https://litgde.github.io/Spectran/reference/examplespectra_descriptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Details on the example spectra used by Spectran — examplespectra_descriptor","title":"Details on the example spectra used by Spectran — examplespectra_descriptor","text":"Contains additional details measurement CIE Standard Illuminant Spectra collected examplespectra.","code":""},{"path":"https://litgde.github.io/Spectran/reference/examplespectra_descriptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Details on the example spectra used by Spectran — examplespectra_descriptor","text":"","code":"examplespectra_descriptor"},{"path":"https://litgde.github.io/Spectran/reference/examplespectra_descriptor.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Details on the example spectra used by Spectran — examplespectra_descriptor","text":"examplespectra_descriptor list element per language. following description covers elements within language element, tibble 11 rows 8 columns. Name Category spectrum (short) Beschreibung Short description category spectrum Identifier list character vectors containing unique identifiers spectrum Button_Name list character vectors containing text displayed buttons spectrum Dateinamen list character vectors containing text used download-filenames URL character vector URLs videos giving context measurements NA, case nothing displayed embargo logical vector indicates whether special message displayed downloading spectrum download list named character vectors containing short description spectrum.","code":""},{"path":"https://litgde.github.io/Spectran/reference/examplespectra_descriptor.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Details on the example spectra used by Spectran — examplespectra_descriptor","text":"https://cie.co./data-tables","code":""},{"path":[]},{"path":"https://litgde.github.io/Spectran/news/index.html","id":"spectran-103","dir":"Changelog","previous_headings":"","what":"Spectran 1.0.3","title":"Spectran 1.0.3","text":"CRAN release: 2023-11-09 small changes prepare package CRAN submission","code":""},{"path":"https://litgde.github.io/Spectran/news/index.html","id":"spectran-100","dir":"Changelog","previous_headings":"","what":"Spectran 1.0.0","title":"Spectran 1.0.0","text":"removed reference OPN4 melanopic evaluation #15 removed term quanta well known term photons #13 made reference complete formula age-dependent correction #12 removed incorrect references CIE S026 #11 removed reference DIN/SPEC 5031-100 alpha-opic weighing #10 changed grouping separator tables . whitespace, e.g., . #8 showing Color Rendering Index correctly CRI language set English #7 changed naming conventions cones line CIE S026 #3 added option set input data scaled importing #4 fixed bug rounded every table numeric three significant digits. #5 #9 fixed bug negative color rendering values show plot. #16 outsourced validation page added one used values. added three new color palettes spectral Plots. can chosen starting Spectran #14","code":""},{"path":"https://litgde.github.io/Spectran/news/index.html","id":"spectran-0929000","dir":"Changelog","previous_headings":"","what":"Spectran 0.9.2.9000","title":"Spectran 0.9.2.9000","text":"Added NEWS.md file track changes package.","code":""}]
